@inject ILogger<Details> Logger
@inject IJSRuntime JSRuntime
@inject ICatalogItemService CatalogItemService

@inherits BlazorAdmin.Helpers.BlazorComponent

@namespace BlazorAdmin.Pages.Orders

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Order Detail - Status: @_item.Status</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Units</th>
                            <th>Unit Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in _item.OrderedProducts)
                        {
                            <tr>
                                <td>@item.ProductName</td>
                                <td>@item.Units</td>
                                <td>@item.UnitPrice</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                @if (_item.Status == "Approved")
                {
                    <span>The order has already approved.</span>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="EditClick">
                        Approve Order
                    </button>
                }

            </div>
        </div>
    </div>
</div>

@if (_showDetailsModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {

    [Parameter]
    public EventCallback<int> OnEditClick { get; set; }

    private string _modalDisplay = "none;";
    private string _modalClass = "";
    private bool _showDetailsModal = false;
    private OrderModel _item = new OrderModel();

    public async Task EditClick()
    {
        await OnEditClick.InvokeAsync(_item.Id);
        await Close();
    }

    public async Task Open(OrderModel order)
    {

        Logger.LogInformation("Now loading... /Catalog/Details/{Id}", order);

        await new Css(JSRuntime).HideBodyOverflow();

        _item = order;

        _modalDisplay = "block;";
        _modalClass = "Show";
        _showDetailsModal = true;

        StateHasChanged();
    }

    public async Task Close()
    {
        await new Css(JSRuntime).ShowBodyOverflow();

        _modalDisplay = "none";
        _modalClass = "";
        _showDetailsModal = false;
    }
}
